imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: @ImhBaseBundle/Resources/config/admin.yml }
    - { resource: @ApplicationSonataMediaBundle/Resources/config/services.yml }

parameters:
    assetic.filter.compass.images_dir: %kernel.root_dir%/../web/images
    assetic.filter.compass.http_path:  /images

framework:
    #esi:             ~
    translator:      { fallback: %locale% }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%

# FOSJsRouting Configuration
fos_js_routing:
    routes_to_expose: [ imh_base_biography ]

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        ['ImhBaseBundle', 'ApplicationSonataMediaBundle', 'SonataMediaBundle', 'SonataCommentBundle']
    ruby: %ruby.bin%
    filters:
        cssrewrite: ~
        sass:
            bin: %sass.bin%
        compass:
            bin: %compass.bin%
            cache_location: %kernel.cache_dir%
            load_paths:
                - "%kernel.root_dir%/../src/Imh/BaseBundle/Resources/assets/sass"
                - "%kernel.root_dir%/../src/Imh/BaseBundle/Resources/public/bower_components"
            apply_to: ".(_scss|sass)$"

#        yui_css:
#            jar: "%kernel.root_dir%/Resources/java/yuicompressor.jar"
#        yui_js:
#            jar: "%kernel.root_dir%/Resources/java/yuicompressor.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8

        types:
            json: Sonata\Doctrine\Types\JsonType

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                auto_mapping: true
                mappings:
#                    ApplicationSonataMediaBundle: ~
#                    SonataMediaBundle: ~
#                    ApplicationSonataClassificationBundle: ~
#                    SonataClassificationBundle: ~
#                    ApplicationSonataUserBundle: ~
#                    SonataUserBundle: ~
                    # add your own bundles here

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
#    spool:     { type: memory }

# Sonata Admin Configuration
sonata_admin:
    title:      IMH Admin
#    title_logo: bundles/acmedemo/img/fancy_acme_logo.png

    templates:
        # see https://github.com/orocrm/SonataAdminBundle/blob/master/Resources/doc/reference/templates.rst
        # for full configuration

        # default global templates
        dashboard: SonataAdminBundle:Core:dashboard.html.twig

# Sonata Block Configuration
sonata_block:
    default_contexts: [cms]
    blocks:
        # Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.user.block.menu:     # used to display the menu in profile pages
        sonata.user.block.account:  # used to display menu option (login option)

# Sonata Media Configuration
sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm
    contexts:
        default:  # the default context is mandatory
            download:
                strategy: sonata.media.security.public_strategy # change to superadmin_strategy
                mode: http

            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.custom

            formats:
                small:           { width: 300, height: 168, constraint: false, quality: 100 } # ~16/9
                big:             { width: 640, height: 360, constraint: false, quality: 100 } # 16/9, constraint: false if width or height should not automatically be calculated
                gallery_mobile:  { width: 580, quality: 100 }
                gallery_desktop: { height: 1000, quality: 100 }

        sonata_collection:
            providers:
              - sonata.media.provider.image

            formats:
                preview: { width: 100, quality: 100}
                wide:    { width: 820, quality: 100}

        sonata_category:
            providers:
              - sonata.media.provider.image

            formats:
                preview: { width: 100, quality: 100}
                wide:    { width: 820, quality: 100}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

    providers:
#        image:
#            thumbnail: sonata.media.thumbnail.liip_imagine
#        vimeo:
#            thumbnail: sonata.media.thumbnail.liip_imagine
#        youtube:
#            thumbnail: sonata.media.thumbnail.liip_imagine
#        dailymotion:
#            thumbnail: sonata.media.thumbnail.liip_imagine

        image:
            resizer:  sonata.media.resizer.simple

    buzz:
        connector:  sonata.media.buzz.connector.curl

# Sonata Comment Configuration
sonata_comment:
    manager_type: orm
    class:
        comment: Application\Sonata\CommentBundle\Entity\Comment # This is an optional value
        thread: Application\Sonata\CommentBundle\Entity\Thread   # This is an optional value

# FOS User Configuration
fos_user:
    db_driver: orm
    firewall_name: main
    user_class: Application\Sonata\UserBundle\Entity\User

    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager

    service:
        user_manager: sonata.user.orm.user_manager

# FOS Comment Configuration
fos_comment:
    db_driver: orm
    class:
        model:
            comment: Application\Sonata\CommentBundle\Entity\Comment
            thread: Application\Sonata\CommentBundle\Entity\Thread
    form:
        comment:
            type: sonata_comment_comment

# Sonata Classification Configuration
sonata_classification:
    class:
        tag:          Application\Sonata\ClassificationBundle\Entity\Tag
        category:     Application\Sonata\ClassificationBundle\Entity\Category
        collection:   Application\Sonata\ClassificationBundle\Entity\Collection
        #media:        Application\Sonata\MediaBundle\Entity\Collection
        context:      Application\Sonata\ClassificationBundle\Entity\Context

    admin:
        tag:
            class:        Sonata\ClassificationBundle\Admin\TagAdmin
            controller:   SonataAdminBundle:CRUD
            translation:  SonataClassificationBundle
        category:
            class:        Sonata\ClassificationBundle\Admin\CategoryAdmin
            controller:   SonataClassificationBundle:CategoryAdmin
            translation:  SonataClassificationBundle
        collection:
            class:        Sonata\ClassificationBundle\Admin\CollectionAdmin
            controller:   SonataAdminBundle:CRUD
            translation:  SonataClassificationBundle
        context:
            class:        Sonata\ClassificationBundle\Admin\ContextAdmin
            controller:   SonataAdminBundle:CRUD
            translation:  SonataClassificationBundle

# Liip Imagine Configuration
liip_imagine:
#    resolvers:
#        default:
#            web_path:
#              web_root: %kernel.root_dir%/../web
#              cache_prefix: media/cache
#
#    loaders:
#        default:
#            filesystem:
#                data_root: %kernel.root_dir%/../web/
#
#    driver:               gd
#    cache:                default
#    data_loader:          default

    controller:
        filter_action: 'SonataMediaBundle:Media:liipImagineFilter'

    filter_sets:
        default_small:
            quality: 100
            filters:
                thumbnail: { size: [200, 70], mode: outbound }

        default_big:
            quality: 100
            filters:
                thumbnail: { size: [500, 70], mode: outbound }

knp_menu:
    twig:
        template: ImhBaseBundle:Menu:knp_menu.html.twig

mobile_detect:
    redirect:
        full:
            is_enabled: false           # default false
            host: http://site.com       # with scheme (http|https), default null, url validate
            status_code: 301            # default 302
            action: redirect            # redirect, no_redirect, redirect_without_path
        mobile:
            is_enabled: false           # default false
            host: http://m.site.com     # with scheme (http|https), default null, url validate
            status_code: 301            # default 302
            action: redirect            # redirect, no_redirect, redirect_without_path
        tablet:
            is_enabled: false           # default false
            host: http://t.site.com     # with scheme (http|https), default null, url validate
            status_code: 301            # default 302
            action: redirect            # redirect, no_redirect, redirect_without_path
        detect_tablet_as_mobile: false  # default false
    switch_device_view:
        save_referer_path: true         # default true
                                        # true  redirectUrl = http://site.com/current/path?currentQuery=string
                                        # false redirectUrl = http://site.com
    service:
        mobile_detector: mobile_detect.mobile_detector.default

    cookie_key: "device_view"                     # default
    switch_param: "device_view"                   # default
    device_view_class: "SunCat\MobileDetectBundle\Helper\DeviceView"
    request_listener_class: "SunCat\MobileDetectBundle\EventListener\RequestListener"
    extension_class: "SunCat\MobileDetectBundle\Twig\Extension\MobileDetectExtension"